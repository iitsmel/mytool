package configure

import (
	"fmt"
	"mytool/pentest"
)

func CrossSiteScript(passing *Scope) {
	stop := make(chan bool)
	reflected := make(chan bool)

	fmt.Println("Start XSS Attack")

	go LoadingIcon(stop)
	go func() {
		reflected <- pentest.GeneralXSS(passing.Attack.Target)
		stop <- true
	}()

	goReflected := <-reflected
	if goReflected {
		fmt.Println("🪲 Found XSS bug")
	} else {
		fmt.Println("❌ XSS bug not found")
	}
}

func RunInjection(passing *Scope) {
	stop := make(chan bool)
	dbInfo := make(chan bool)
	generic := make(chan bool)
	auth := make(chan bool)
	union := make(chan bool)
	blind := make(chan bool)

	fmt.Println("Start SQL Injection Attack")

	go LoadingIcon(stop)

	go func() {
		dbInfo <- pentest.SQLdbInfo(passing.Attack.Target)
		generic <- pentest.GenericSQLInjection(passing.Attack.Target)
		auth <- pentest.AuthBypassSQLInjection(passing.Attack.Target)
		union <- pentest.UnionSQLInjection(passing.Attack.Target)
		blind <- pentest.BlindSQLInjection(passing.Attack.Target)
		stop <- true
	}()

	dbInfoResult := <-dbInfo
	genericResult := <-generic
	authResult := <-auth
	unionResult := <-union
	blindResult := <-blind

	if dbInfoResult {
		fmt.Println("👌 Found Database Information")
	} else {
		fmt.Println("👎 Database Information not found")
	}

	if genericResult {
		fmt.Println("🪲 Found Generic SQL Injection bug")
	} else {
		fmt.Println("❌ Generic SQL Injection bug not found")
	}
	if authResult {
		fmt.Println("🪲 Found Auth Bypass SQL Injection bug")
	} else {
		fmt.Println("❌ Auth Bypass SQL Injection bug not found")
	}
	if unionResult {
		fmt.Println("🪲 Found UNION SQL Injection bug")
	} else {
		fmt.Println("❌ UNION SQL Injection bug not found")
	}

	if blindResult {
		fmt.Println("🪲 Found Blind SQL Injection bug")
	} else {
		fmt.Println("❌ UNION Blind Injection bug not found")
	}
}

func DoENAC(passing *Scope) {
	fmt.Println("ENAC function called")
	stop := make(chan bool)
	enac := make(chan bool)

	go LoadingIcon(stop)
	go func() {
		enac <- pentest.ENAC(passing.Attack.Target)
		stop <- true
	}()

	enacing := <-enac
	if enacing {
		fmt.Println("🪄 performing ENAC")
	} else {
		fmt.Println("⚠️ can not perform ENAC")
	}
}

func DoLight(passing *Scope) {
	fmt.Println("Light function called")
	stop := make(chan bool)
	light := make(chan bool)

	go LoadingIcon(stop)
	go func() {
		light <- pentest.Light(passing.Attack.Target)
		stop <- true
	}()

	lighting := <-light
	if lighting {
		fmt.Println("🪄 performing Light")
	} else {
		fmt.Println("⚠️ can not perform Light")
	}
}
