package pentest

import (
	"fmt"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/fatih/color"
)

func CreateFolder() string {
	fullPath := "results/" + "FullOperation-" + time.Now().Format("2006-01-02 15:04:05")
	makeFileErr := os.MkdirAll(fullPath, os.ModePerm)
	if makeFileErr != nil {
		fmt.Println(makeFileErr)
	}
	return fullPath
}

func TargetStatusTools(target string) bool {
	response, errorStatus := http.Get(target)

	if errorStatus != nil || response.StatusCode != http.StatusOK {
		return false
	}

	defer response.Body.Close()
	return true
}

func SystemAlert(msg string) {
	red := color.New(color.FgHiRed).SprintFunc()
	boxTop := ` ____________________________________________________`
	boxTitle := `|` + red(`X`) + `                   ` + red(`System Alert`) + `                   ` + red(`X`) + `|`
	boxSpace := `|                                                    |`
	boxBottom := `|____________________________________________________|`

	fmt.Println(boxTop)
	fmt.Println(boxTitle)
	fmt.Println(boxSpace)
	wrappedLines := SystemTextWrap(msg, 51)
	for _, line := range wrappedLines {
		fmt.Printf("| %s|\n", red(padRight(line, 51)))
	}
	fmt.Println(boxBottom)
}

func SystemMessage(msg []byte) {
	green := color.New(color.FgHiGreen).SprintFunc()
	boxTop := ` ____________________________________________________`
	boxTitle := `|` + green(`X`) + `                 ` + green(`System Message`) + `                   ` + green(`X`) + `|`
	boxSpace := `|                                                    |`
	boxBottom := `|____________________________________________________|`

	fmt.Println(boxTop)
	fmt.Println(boxTitle)
	fmt.Println(boxSpace)
	ascii := string(msg[:])
	wrappedLines := SystemTextWrap(ascii, 51)
	for _, line := range wrappedLines {
		fmt.Printf("| %s|\n", green(padRight(line, 51)))
	}
	fmt.Println(boxBottom)
}

func SystemTextWrap(text string, lineLength int) []string {
	var lines []string
	words := strings.Fields(text)
	currentLine := ""

	for _, word := range words {
		if len(currentLine)+len(word)+1 <= lineLength {
			if currentLine != "" {
				currentLine += " "
			}
			currentLine += word
		} else {
			lines = append(lines, currentLine)
			currentLine = word
		}
	}

	if currentLine != "" {
		lines = append(lines, currentLine)
	}

	return lines
}

func padRight(s string, width int) string {
	return (s + strings.Repeat(" ", width-len(s)))
}
