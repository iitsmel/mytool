package pentest

import (
	"fmt"
)

func UnionSQLInjection(target string, ignoring bool) bool {
	if !ignoring {
		return false
	}

	fmt.Println("Ignoring non 200 HTTP Response of the target.")

	foundOrNot := false
	fmt.Println()
	fmt.Println("Start UNION SQL Injection")
	fmt.Println()
	fmt.Println("Target connected, start attacking...")
	fmt.Println("Start finding regular UNION SQL Injection")
	fmt.Println()

	payload, payloaderror := ReadPayload("pentest/payload/SQL/unionSQL.txt")
	if payloaderror != nil {
		fmt.Printf("Error reading payload file: %s\n", payloaderror)
	}

	for _, trial := range payload {
		URL := target + trial
		if SendingRequest(URL) {
			foundOrNot = true
			fmt.Printf("Attack Success: %s\n", URL)
		}
	}

	fmt.Println("Start finding username and password.")

	if foundOrNot {
		fmt.Println()

		authPayload, authPayloaderror := ReadPayload("pentest/payload/SQL/unionAuthSQL.txt")
		if authPayloaderror != nil {
			fmt.Printf("Error reading payload file: %s\n", authPayloaderror)
		}

		for _, trial := range authPayload {
			URL := target + trial
			if SendingRequest(URL) {
				foundOrNot = true
				fmt.Printf("Attack Success: %s\n", URL)
			}
		}
		return true
	}

	fmt.Printf("UNION attack failed so will not try to find usename and password using UNION attack.")
	return false
}
